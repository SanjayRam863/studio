\'use client\';\n\nimport {useState} from \'react\';\nimport {useForm} from \'react-hook-form\';\nimport {zodResolver} from \'@hookform/resolvers/zod\';\nimport {z} from \'zod\';\nimport {Loader2} from \'lucide-react\';\n\nimport {Button} from \'@/components/ui/button\';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \'@/components/ui/form\';\nimport {Input} from \'@/components/ui/input\';\nimport {useToast} from \'@/hooks/use-toast\';\nimport {\n  PersonalizedDietPlanOutput,\n  generatePersonalizedDietPlan,\n} from \'@/ai/flows/personalized-diet-plan-generation\';\nimport {Card, CardContent, CardHeader, CardTitle} from \'./ui/card\';\nimport {Tabs, TabsContent, TabsList, TabsTrigger} from \'./ui/tabs\';\nimport {Table, TableBody, TableCell, TableHead, TableHeader, TableRow} from \'./ui/table\';\nimport {Badge} from \'./ui/badge\';\nimport {Skeleton} from \'./ui/skeleton\';\n\nconst formSchema = z.object({\n  medicalConditions: z\n    .string()\n    .min(1, \"Please enter at least one condition or \'None\'.\"),\n  calorieNeeds: z.coerce\n    .number()\n    .min(500, \'Calorie needs must be at least 500.\')\n    .max(10000, \'Calorie needs seem too high.\'),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function DietPlanForm() {\n  const {toast} = useToast();\n  const [dietPlan, setDietPlan] = useState<PersonalizedDietPlanOutput | null>(\n    null\n  );\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      medicalConditions: \'\',\n      calorieNeeds: 2000,\n    },\n  });\n\n  async function onSubmit(values: FormValues) {\n    setIsLoading(true);\n    setDietPlan(null);\n    try {\n      const result = await generatePersonalizedDietPlan(values);\n      setDietPlan(result);\n    } catch (error) {\n      console.error(\'Error generating diet plan:\', error);\n      toast({\n        title: \'Error\',\n        description: \'Failed to generate diet plan. Please try again.\',\n        variant: \'destructive\',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Card>\n        <CardContent className=\"pt-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              <FormField\n                control={form.control}\n                name=\"medicalConditions\"\n                render={({field}) => (\n                  <FormItem>\n                    <FormLabel>Medical Conditions</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Diabetes, High Blood Pressure\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      List any medical conditions, separated by commas. Type \'None\'\n                      if you have no conditions.\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"calorieNeeds\"\n                render={({field}) => (\n                  <FormItem>\n                    <FormLabel>Daily Calorie Needs</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" placeholder=\"e.g., 2000\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Enter your estimated daily calorie requirement.\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Generate Plan\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {isLoading && <DietPlanSkeleton />}\n\n      {dietPlan && (\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Your Personalized Diet Plan</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"plan\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"plan\">Diet Plan</TabsTrigger>\n                <TabsTrigger value=\"shopping\">Shopping List</TabsTrigger>\n                <TabsTrigger value=\"notes\">Notes</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"plan\" className=\"mt-4\">\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Total Calories:{ \' \}\n                    <Badge variant=\"secondary\">{dietPlan.totalCalories}</Badge>\n                  </p>\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {dietPlan.dietPlan.map((meal, index) => (\n                      <Card key={index}>\n                        <CardHeader>\n                          <CardTitle>{meal.name}</CardTitle>\n                          <p className=\"text-sm font-medium text-primary\">\n                            {meal.calories} calories\n                          </p>\n                        </CardHeader>\n                        <CardContent>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {meal.ingredients}\n                          </p>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </TabsContent>\n              <TabsContent value=\"shopping\" className=\"mt-4\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Item</TableHead>\n                      <TableHead className=\"text-right\">Quantity</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {dietPlan.shoppingList.map((item, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{item.item}</TableCell>\n                        <TableCell className=\"text-right\">\n                          {item.quantity}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TabsContent>\n              <TabsContent value=\"notes\" className=\"mt-4\">\n                <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                  {dietPlan.notes}\n                </p>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      )}\n    </>\n  );\n}\n\nfunction DietPlanSkeleton() {\n  return (\n    <Card className=\"mt-8\">\n      <CardHeader>\n        <Skeleton className=\"h-8 w-1/2\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-6 w-1/4\" />\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            <Card>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-3/4\" />\n                <Skeleton className=\"h-4 w-1/2 mt-2\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-full mt-2\" />\n                <Skeleton className=\"h-4 w-3/4 mt-2\" />\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-3/4\" />\n                <Skeleton className=\"h-4 w-1/2 mt-2\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-full mt-2\" />\n                <Skeleton className=\"h-4 w-3/4 mt-2\" />\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-3/4\" />\n                <Skeleton className=\"h-4 w-1/2 mt-2\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full\" />\n                <Skeleton className=\"h-4 w-full mt-2\" />\n                <Skeleton className=\"h-4 w-3/4 mt-2\" />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n